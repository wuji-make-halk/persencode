￼题目(一):我们可以用 static 修饰一个类的成员函数,也可以用 const 修饰类的成员函数(写 在函数的最后表示不能修改成员变量,不是指写在前面表示返回值为常量 )。请问:能不能 同时用 static 和 const 修饰类的成员函数?
分析:答案是不可以。C++编译器在实现 const 的成员函数的时候为了确保该函数不能修改 类的实例的状态,会在函数中添加一个隐式的参数 const this*。但当一个成员为 static 的时 候,该函数是没有 this 指针的。也就是说此时 static 的用法和 static 是冲突的。
我们也可以这样理解:两者的语意是矛盾的。 static 的作用是表示该函数只作用在类型的静 态变量上,与类的实例没有关系;而 const 的作用是确保函数不能修改类的实例的状态 ,与 类型的静态变量没有关系。因此不能同时用它们。
题目(二 ):运行下面的代码,输出是什么?
class A {
};
class B { public:
B() {}
~B() {} };
class C { public:
C() {}
virtual ~C() {} };
int _tmain(int argc, _TCHAR* argv[]) {
printf("%d, %d, %d\n", sizeof(A), sizeof(B), sizeof(C));
return 0; }
分析:答案是 1, 1, 4。class A 是一个空类型,它的实例不包含任何信息,本来求 sizeof 应该 是 0。但当我们声明该类型的实例的时候 ,它必须在内存中占有一定的空间 ,否则无法使用 这些实例。至于占用多少内存,由编译器决定。Visual Studio 2008 中每个空类型的实例占用 一个 byte 的空间。
class B 在 class A 的基础上添加了构造函数和析构函数。由于构造函数和析构函数的调用与 类型的实例无关(调用它们只需要知道函数地址即可 ),在它的实例中不需要增加任何信息 。 所以 sizeof(B)和 sizeof(A)一样,在 Visual Studio 2008 中都是 1。
￼class C 在 class B 的基础上把析构函数标注为虚拟函数。 C++的编译器一旦发现一个类型中 有虚拟函数,就会为该类型生成虚函数表 ,并在该类型的每一个实例中添加一个指向虚函数 表的指针。在 32 位的机器上,一个指针占 4 个字节的空间,因此 sizeof(C)是 4。
题目(三 ):运行下面中的代码,得到的结果是什么?
class A { private:
int m_value; public:
A(int value) {
m_value = value; }
void Print1() {
printf("hello world"); }
void Print2() {
printf("%d", m_value); }
};
int _tmain(int argc, _TCHAR* argv[]) {
A *pA = NULL; pA->Print1(); pA->Print2(); return 0;
}
分析:答案是 Print1 调用正常,打印出 hello world,但运行至 Print2 时,程序崩溃。调用 Print1 时,并不需要 pA 的地址,因为 Print1 的函数地址是固定的。编译器会给 Print1 传入一个 this 指针,该指针为 NULL,但在 Print1 中该 this 指针并没有用到。只要程序运行时没有访问不 该访问的内存就不会出错,因此运行正常。在运行 print2 时,需要 this 指针才能得到 m_value 的值。由于此时 this 指针为 NULL,因此程序崩溃了。
题目(四 ):运行下面中的代码,得到的结果是什么?
class A { private:
int m_value; public:
￼A(int value) {
m_value = value; }
void Print1() {
printf("hello world"); }
virtual void Print2() {
printf("hello world"); }
};
int _tmain(int argc, _TCHAR* argv[]) {
A* pA = NULL; pA->Print1(); pA->Print2();
return 0; }
分析:答案是 Print1 调用正常,打印出 hello world,但运行至 Print2 时,程序崩溃。Print1 的调用情况和上面的题目一样,不在赘述。由于 Print2 是虚函数。C++调用虚函数的时候, 要根据实例(即 this 指针指向的实例)中虚函数表指针得到虚函数表,再从虚函数表中找到 函数的地址。由于这一步需要访问实例的地址(即 this 指针),而此时 this 指针为空指针, 因此导致内存访问出错。
题目(五 ):静态成员函数能不能同时也是虚函数?
分析: 答案是不能 .调用静态成员函数不要实例。但调用虚函数需要从一个实例中指向虚函 数表的指针以得到函数的地址,因此调用虚函数需要一个实例。两者相互矛盾。
程序员面试题精选 100 题(53)-C++/C#面试题(2)
￼题目(六):运行下列 C++代码,输出什么?
struct Point3D {
int x; int y; int z;
};
int _tmain(int argc, _TCHAR* argv[])
￼{
Point3D* pPoint = NULL;
int offset = (int)(&(pPoint)->z);
printf("%d", offset);
return 0; }
答案:输出 8。由于在 pPoint->z 的前面加上了取地址符号,运行到此时的时候,会在 pPoint 的指针地址上加 z 在类型 Point3D 中的偏移量 8。由于 pPoint 的地址是 0,因此最终 offset 的值是 8。 &(pPoint->z)的语意是求 pPoint 中变量 z 的地址(pPoint 的地址 0 加 z 的偏移量 8),并不需要访问 pPoint 指向的内存。只要不访问非法的内存,程序就不会出错。
题目(七):运行下列 C++代码,输出什么?
class A { public:
A() {
Print(); }
virtual void Print() {
printf("A is constructed.\n"); }
};
class B: public A {
public:
B() {
Print(); }
virtual void Print() {
printf("B is constructed.\n"); }
};
int _tmain(int argc, _TCHAR* argv[]) {
A* pA = new B();
￼delete pA; return 0;
}
答案:先后打印出两行:A is constructed. B is constructed. 调用 B 的构造函数时,先会调用 B 的基类及 A 的构造函数。然后在 A 的构造函数里调用 Print。由于此时实例的类型 B 的部分 还没有构造好,本质上它只是 A 的一个实例,他的虚函数表指针指向的是类型 A 的虚函数 表。因此此时调用的 Print 是 A::Print,而不是 B::Print。接着调用类型 B 的构造函数,并调 用 Print。此时已经开始构造 B,因此此时调用的 Print 是 B::Print。同样是调用虚拟函数 Print, 我们发现在类型 A 的构造函数中,调用的是 A::Print,在 B 的构造函数中,调用的是 B::Print。 因此虚函数在构造函数中,已经失去了虚函数的动态绑定特性。
题目(九):在 C++和 C#中,struct 和 class 有什么不同?
答案:在 C++中,如果没有标明函数或者变量是的访问权限级别 ,在 struct 中,是 public 的;
而在 class 中,是 private 的.
题目(十):有一个复杂链表,其结点除了有一个 m_pNext 指针指向下一个结点外,还有一 个 m_pSibling 指向链表中的任一结点
或者 NULL。其结点的 C++定义如下:
struct ComplexNode {
int m_nValue; ComplexNode* m_pNext; ComplexNode* m_pSibling;
};
上右图是一个含有 5 个结点的该类型复杂链表。图中实线箭头表示 m_pNext 指针,虚 线箭头表示 m_pSibling 指针。为简单起见,指向 NULL 的指针没有画出。
请完成函数 ComplexNode* Clone(ComplexNode* pHead),以复制一个复杂链表。 分析:在常见的数据结构上稍加变化 ,这是一种很新颖的面试题 。要在不到一个小时的 时间里解决这种类型的题目 ,我们需要较快的反应能力 ,对数据结构透彻的理解以及扎实的
编程功底. 看到这个问题,我的第一反应是分成两步:第一步是复制原始链表上的每个链表, 并用 m_pNext 链接起来。第二步,假设原始链表中的某节点 N 的 m_pSibling 指向结点 S。 由于 S 的位置在链表上有可能在 N 的前面也可能在 N 的后面,所以要定位 N 的位置我们需 要从原始链表的头结点开始找 。假设从原始链表的头结点开始经过 s 步找到结点 S。那么在 复制链表上结点 N 的 m_pSibling 的 S’,离复制链表的头结点的距离也是 s。用这种办法我 们就能为复制链表上的每个结点设置 m_pSibling 了。对一个含有 n 个结点的链表,由于定 位每个结点的 m_pSibling,都需要从链表头结点开始经过 O(n)步才能找到,因此这种方法 的总时间复杂度是 O(n2)。由于上述方法的时间主要花费在定位结点的 m_pSibling 上面,我 们试着在这方面去做优化。我们还是分为两步:第一步仍然是复制原始链表上的每个结点 N,
￼￼￼￼
￼并创建 N’,然后把这些创建出来的结点链接起来。这里我们对 <N,N’>的配对信息放到一 个哈希表中。第二步还是设置复制链表上每个结点的 m_pSibling。如果在原始链表中结点 N 的 m_pSibling 指向结点 S,那么在复制链表中,对应的 N’应该指向 S’。由于有了哈希表, 我们可以用 O(1)的时间根据 S 找到 S’。
第二种方法相当于用空间换时间,以 O(n)的空间消耗实现了 O(n)的时间效率。
接着我们来换一种思路,在不用辅助空间的情况下实现 O(n)的时间效率。第三种 方法的第一步仍然是根据原始链表的每个结点 N,创建对应的 N’。这一次,我们把 N’链接 在 N 的后面。实例中的链表经过这一步之后变成了:
§
￼￼这一步的代码如下:
/////////////////////////////////////////////////////////////////////////////////
￼// Clone all nodes in a complex linked list with head pHead, // and connect all nodes with m_pNext link ///////////////////////////////////////////////////////////////////////////////// void CloneNodes(ComplexNode* pHead)
{
ComplexNode* pNode = pHead; while(pNode != NULL)
{
ComplexNode* pCloned = new ComplexNode(); pCloned->m_nValue= pNode->m_nValue; pCloned->m_pNext = pNode->m_pNext; pCloned->m_pSibling = NULL;
pNode->m_pNext = pCloned;
pNode = pCloned->m_pNext; }
}
￼￼第二步是设置我们复制 出来的链表上的结点 的
m_pSibling。假设原始链表上的 N 的 m_pSibling 指向结点 S,那么 其对应复制出来的 §N’是 N->m_pNext,同样 S’也是 S->m_pNext。这就是我们在上一
￼步中把每个结点复制出来的结点链接在原始结点后面的原因 。有了这样的链接方式,我们就 能在 O(1)中就能找到每个结点的 m_pSibling 了。例子中的链表经过这一步,就变成如下结 构了:
§
￼￼这一步的代码如下:
/////////////////////////////////////////////////////////////////////////////////
￼// Connect sibling nodes in a complex link list ///////////////////////////////////////////////////////////////////////////////// void ConnectSiblingNodes(ComplexNode* pHead)
{
ComplexNode* pNode = pHead; while(pNode != NULL)
{
ComplexNode* pCloned = pNode->m_pNext; if(pNode->m_pSibling != NULL)
{
pCloned->m_pSibling = pNode->m_pSibling->m_pNext; }
pNode = pCloned->m_pNext; }
}
￼第三步是把这个长链表拆分成两个:把奇数位置的结点链接起来就是原始链表, 把偶数位置的结点链接出来就是复制出来的链表 。上述例子中的链表拆分之后的两个链表如 下:
§
￼￼要实现这一步,也不是很难的事情。其对应的代码如下:
/////////////////////////////////////////////////////////////////////////////////
￼// Split a complex list into two:
// Reconnect nodes to get the original list, and its cloned list
￼/////////////////////////////////////////////////////////////////////////////////
ComplexNode* ReconnectNodes(ComplexNode* pHead) {
ComplexNode* pNode = pHead; ComplexNode* pClonedHead = NULL; ComplexNode* pClonedNode = NULL;
if(pNode != NULL) {
pClonedHead = pClonedNode = pNode->m_pNext; pNode->m_pNext = pClonedNode->m_pNext; pNode = pNode->m_pNext;
}
while(pNode != NULL) {
pClonedNode->m_pNext = pNode->m_pNext; pClonedNode = pClonedNode->m_pNext;
pNode->m_pNext = pClonedNode->m_pNext;
pNode = pNode->m_pNext; }
return pClonedHead; }
￼我们把上面三步合起来,就是复制链表的完整过程:
￼///////////////////////////////////////////////////////////////////////////////// // Clone a complex linked list with head pHead ///////////////////////////////////////////////////////////////////////////////// ComplexNode* Clone(ComplexNode* pHead)
{
CloneNodes(pHead); ConnectSiblingNodes(pHead); return ReconnectNodes(pHead);
}
￼